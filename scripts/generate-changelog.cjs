#!/usr/bin/env node

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ CHANGELOG.md
const changelogPath = path.resolve(process.cwd(), "CHANGELOG.md");

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ (—Ä–µ–ª–∏–∑)
let lastTag = "";
try {
  lastTag = execSync("git describe --tags --abbrev=0").toString().trim();
} catch {
  /* ignore if no tags */
}

let log = "";
if (lastTag) {
  // –¢–æ–ª—å–∫–æ –∫–æ–º–º–∏—Ç—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
  log = execSync(
    `git log ${lastTag}..HEAD --pretty=format:"%h|%ad|%s" --date=short --no-merges`
  ).toString();
} else {
  // –í—Å–µ –∫–æ–º–º–∏—Ç—ã, –µ—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç
  log = execSync(
    'git log --pretty=format:"%h|%ad|%s" --date=short --no-merges'
  ).toString();
}

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ Conventional Commits
const types = {
  feat: "‚ú® Features",
  fix: "üêõ Bug Fixes",
  docs: "üìù Documentation",
  refactor: "üî® Refactoring",
  chore: "üîß Chores",
  test: "‚úÖ Tests",
  style: "üíÑ Style",
  perf: "‚ö° Performance",
  build: "üì¶ Build",
  ci: "ü§ñ CI",
};

const entries = log
  .split("\n")
  .map((line) => {
    const [hash, date, subject] = line.split("|");
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –±–µ–∑ subject
    if (!subject || typeof subject !== "string" || !subject.trim()) return null;
    const match = subject.match(/^(\w+)(\(.+\))?:/);
    const type = match ? match[1] : "other";
    return { hash, date, subject, type };
  })
  .filter(Boolean);

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
const grouped = {};
for (const entry of entries) {
  const group = types[entry.type] || "üîπ Other";
  if (!grouped[group]) grouped[group] = [];
  grouped[group].push(entry);
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ package.json
let version = "";
try {
  const pkg = require(path.resolve(process.cwd(), "package.json"));
  version = pkg.version;
} catch {
  /* ignore if package.json not found */
}

const today = new Date().toISOString().slice(0, 10);

let changelog = `\n## v${version || ""} (${today})\n`;
for (const group of Object.keys(grouped)) {
  changelog += `\n### ${group}\n`;
  for (const entry of grouped[group]) {
    changelog += `- ${entry.subject} (${entry.hash}, ${entry.date})\n`;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ CHANGELOG.md
let prev = "";
if (fs.existsSync(changelogPath)) {
  prev = fs.readFileSync(changelogPath, "utf8");
}
fs.writeFileSync(changelogPath, changelog + "\n" + prev);

console.log("CHANGELOG.md updated!");
